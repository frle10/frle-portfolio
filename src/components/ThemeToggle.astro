---
import Icon from './Icon.astro';
---

<theme-toggle>
  <button>
    <span class="sr-only">Dark theme</span>
    <span class="icon light"><Icon icon="sun" /></span>
    <span class="icon dark"><Icon icon="moon-stars" /></span>
  </button>
</theme-toggle>

<style>
  button {
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0;
    background-color: var(--gray-999);
    box-shadow: inset 0 0 0 1px var(--accent-overlay);
    cursor: pointer;
    transition:
      transform 0.2s ease-out,
      box-shadow 0.2s ease-out;
  }

  button:hover {
    transform: scale(1.1);
    box-shadow:
      inset 0 0 0 1px var(--accent-regular),
      var(--shadow-sm);
  }

  .icon {
    z-index: 1;
    position: relative;
    display: flex;
    padding: 0.6rem;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.25rem;
    color: var(--accent-overlay);
  }

  .icon.light::before {
    content: '';
    z-index: -1;
    position: absolute;
    inset: 0;
    background-color: var(--accent-regular);
    border-radius: 999rem;
  }

  :global(.theme-dark) .icon.light::before {
    transform: translateX(100%);
  }

  :global(.theme-dark) .icon.dark,
  :global(html:not(.theme-dark)) .icon.light,
  button[aria-pressed='false'] .icon.light {
    color: var(--accent-text-over);
  }

  @media (prefers-reduced-motion: no-preference) {
    .icon,
    .icon.light::before {
      transition:
        transform var(--theme-transition),
        color var(--theme-transition);
    }
  }

  @media (forced-colors: active) {
    .icon.light::before {
      background-color: SelectedItem;
    }
  }
</style>

<script>
  const applyTheme = () => {
    const theme = localStorage.getItem('theme');
    if (theme === 'dark') {
      document.documentElement.classList.add('theme-dark');
    } else {
      document.documentElement.classList.remove('theme-dark');
    }
  };

  applyTheme();
  document.addEventListener('astro:after-swap', applyTheme);

  class ThemeToggle extends HTMLElement {
    constructor() {
      super();

      const button = this.querySelector('button');
      if (!button) return;

      this.setButtonState();

      button.addEventListener('click', () => {
        const isDark = this.isDark();
        const newTheme = isDark ? 'light' : 'dark';
        localStorage.setItem('theme', newTheme);
        button.setAttribute('aria-pressed', String(!isDark));
        applyTheme();
      });
    }

    isDark() {
      return localStorage.getItem('theme') === 'dark';
    }

    setButtonState() {
      const button = this.querySelector('button');
      if (button) {
        button.setAttribute('aria-pressed', String(this.isDark()));
      }
    }
  }

  customElements.define('theme-toggle', ThemeToggle);

  document.addEventListener('astro:after-swap', () => {
    const toggle = document.querySelector<ThemeToggle>('theme-toggle');
    if (toggle && typeof toggle.setButtonState === 'function') {
      toggle.setButtonState();
    }
  });
</script>
