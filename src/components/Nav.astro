---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

const textLinks: { label: string; href: string }[] = [
  { label: 'Home', href: '/' },
  { label: 'Work', href: '/work/' },
  { label: 'About', href: '/about/' },
];

const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
  { label: 'LinkedIn', href: 'https://www.linkedin.com/in/ivan-skorupan-9ba1b118b/', icon: 'linkedin-logo' },
  { label: 'GitHub', href: 'https://github.com/frle10', icon: 'github-logo' },
  { label: 'YouTube', href: 'https://www.youtube.com/@Frlee', icon: 'youtube-logo' },
];

const isCurrentPage = (href: string) => {
  const currentPathname = Astro.url.pathname;
  if (href === '/') return currentPathname === '/';
  const formattedPathname = currentPathname.endsWith('/') ? currentPathname.slice(0, -1) : currentPathname;
  const formattedHref = href.endsWith('/') ? href.slice(0, -1) : href;
  return formattedPathname.startsWith(formattedHref);
};
---

<nav>
  <div class="menu-header">
    <a href="/" class="site-title">
      <Icon icon="head-circuit" color="var(--accent-regular)" size="1.6em" gradient />
      <span class="site-title-text">Ivan Skorupan</span>
    </a>

    <menu-button>
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <span class="icon-menu"><Icon icon="list" /></span>
          <span class="icon-close"><Icon icon="x" /></span>
        </button>
      </template>
    </menu-button>
  </div>
  
  <noscript>
    <ul class="nav-items">
      {textLinks.map(({ label, href }) => (
        <li>
          <a aria-current={isCurrentPage(href) ? 'page' : undefined} class="link" href={href}>
            {label}
          </a>
        </li>
      ))}
    </ul>
  </noscript>

  <div id="menu-content" hidden>
    <ul class="nav-items">
      {textLinks.map(({ label, href }) => (
        <li>
          <a aria-current={isCurrentPage(href) ? 'page' : undefined} class="link" href={href}>
            {label}
          </a>
        </li>
      ))}
    </ul>

    <div class="menu-footer">
      <div class="socials">
        {iconLinks.map(({ href, icon, label }) => (
          <a target="_blank" href={href} class="social" rel="noopener noreferrer" data-tooltip={label}>
            <span class="sr-only">{label}</span>
            <Icon icon={icon} size='2em' />
          </a>
        ))}
      </div>

      <div class="theme-toggle">
        <ThemeToggle />
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();
      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      const btn = this.querySelector('button');
      const menu = document.getElementById('menu-content');

      if (!btn || !menu) return;
      
      menu.hidden = true;
      menu.classList.add('menu-content');

      const setExpanded = (isExpanded: boolean) => {
        btn.setAttribute('aria-expanded', String(isExpanded));
        menu.hidden = !isExpanded;
      };

      btn.addEventListener('click', () => {
        const isExpanded = btn.getAttribute('aria-expanded') === 'true';
        setExpanded(!isExpanded);
      });

      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        const isMobile = e.matches;
        btn.hidden = !isMobile;
        if (isMobile) {
          setExpanded(false);
        } else {
          setExpanded(true);
        }
      };
      
      const mediaQueries = window.matchMedia('(max-width: 61.99em)');
      handleViewports(mediaQueries);
      mediaQueries.addEventListener('change', handleViewports);
    }
  }
  customElements.define('menu-button', MenuButton);
</script>

<style>
  /* --- Base Styles for All Screen Sizes --- */
  nav {
    font-family: var(--font-brand);
    font-weight: 500;
    margin-bottom: 3.5rem;
    position: sticky;
    top: 0;
    z-index: 9990;
    width: 100%;
    background-color: hsla(var(--gray-999-basis), 0.5);
    backdrop-filter: blur(16px);
    border-bottom: 1px solid var(--gray-800);
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.5rem;
    padding: 1.5rem;
    background-color: transparent; 
    border-bottom: none;
    position: relative;
    z-index: 20;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
    font-size: var(--text-lg);
  }

  .menu-button {
    position: relative;
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.5rem;
    color: var(--gray-300);
    background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
    box-shadow: var(--shadow-md);
    outline: none;
    cursor: pointer;
  }
  
  .menu-button[aria-expanded='true'] {
    color: var(--gray-0);
  }

  .menu-button[hidden] {
    display: none;
  }

  .menu-button .icon-menu,
  .menu-button .icon-close {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  .menu-button .icon-close { opacity: 0; transform: translate(-50%, -50%) rotate(-90deg); }
  .menu-button[aria-expanded='true'] .icon-menu { opacity: 0; transform: translate(-50%, -50%) rotate(90deg); }
  .menu-button[aria-expanded='true'] .icon-close { opacity: 1; transform: translate(-50%, -50%) rotate(0deg); }

  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
    z-index: 10;
    /* The dropdown needs a solid background to be readable */
    background-color: var(--gray-999);
    border-bottom: 1px solid var(--gray-800);
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow: var(--shadow-lg);
  }

  .nav-items {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-md);
    list-style: none;
    padding: 2rem;
    margin: 0;
  }

  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
  }

  .link[aria-current='page'] {
    color: var(--gray-0);
  }

  .menu-footer {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    padding: 1.5rem 2rem;
    border-top: 1px solid var(--gray-800);
  }

  .socials {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .social {
    position: relative;
    display: flex;
    color: var(--gray-0);
    transition: color 0.3s ease, transform 0.3s ease;
  }

  .social:hover, .social:focus {
    color: var(--accent-regular);
    transform: translateY(-3px);
  }

/* --- The New Tooltip Styles --- */
  .social::after {
    content: attr(data-tooltip);
    position: absolute;
    top: 140%;
    left: 50%;
    transform: translateX(-50%) translateY(-5px);
    
    background: var(--gray-900);
    color: var(--gray-50);
    font-family: var(--font-body);
    font-size: var(--text-sm);
    font-weight: 500;
    padding: 0.25rem 0.6rem;
    border-radius: 0.25rem;
    box-shadow: var(--shadow-md);
    white-space: nowrap;

    /* Hide it by default */
    opacity: 0;
    pointer-events: none; /* Make sure it doesn't block clicks */
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .social:hover::after, .social:focus::after {
    /* Show it on hover */
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  /* --- Desktop Styles --- */
  @media (min-width: 62em) {
    nav {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      padding: 1rem 5rem;
      gap: 1rem;
    }

    .menu-header { padding: 0; }

    .menu-content { display: contents; }

    .nav-items {
      position: relative;
      flex-direction: row;
      justify-content: center;
      font-size: var(--text-md);
      border-radius: 999rem;
      border: 0;
      padding: 0.5rem 0.5625rem;
      background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
      box-shadow: var(--shadow-md);
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: '';
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition: color var(--theme-transition), background-color var(--theme-transition);
    }

    .link:hover, .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link[aria-current='page'] {
      color: var(--accent-text-over);
      background-color: var(--accent-regular);
      text-shadow: 1px 1px 2px hsla(var(--gray-999-basis), 0.7);
    }

    .menu-footer {
      grid-column: 3 / 4;
      justify-self: flex-end;
      padding: 0;
      background-color: transparent;
      box-shadow: none;
      border: 0;
    }
  }
</style>
