---
import Icon from './Icon.astro';
import ThemeToggle from './ThemeToggle.astro';
import type { iconPaths } from './IconPaths';

/** Main menu items */
const textLinks: { label: string; href: string }[] = [
  { label: 'Home', href: '/' },
  { label: 'Work', href: '/work/' },
  { label: 'About', href: '/about/' },
];

/** Icon links to social media */
const iconLinks: { label: string; href: string; icon: keyof typeof iconPaths }[] = [
  { label: 'LinkedIn', href: 'https://www.linkedin.com/in/ivan-skorupan-9ba1b118b/', icon: 'linkedin-logo' },
  { label: 'GitHub', href: 'https://github.com/frle10', icon: 'github-logo' },
  { label: 'YouTube', href: 'https://www.youtube.com/@Frlee', icon: 'youtube-logo' },
];

/** Test if a link is pointing to the current page. */
const isCurrentPage = (href: string) => {
  const currentPathname = Astro.url.pathname;

  // Exact match for the homepage
  if (href === '/') {
    return currentPathname === '/';
  }

  // For other links, check if the current path starts with the link's href.
  // This makes sure /work/project-slug highlights the /work/ link.
  // The trailing slash is removed from the currentPathname to ensure a clean match.
  const formattedPathname = currentPathname.endsWith('/') ? currentPathname.slice(0, -1) : currentPathname;
  const formattedHref = href.endsWith('/') ? href.slice(0, -1) : href;

  return formattedPathname.startsWith(formattedHref);
};
---

<nav>
  <div class="menu-header">
    <a href="/" class="site-title">
      <Icon icon="terminal-window" color="var(--accent-regular)" size="1.6em" gradient />
      Ivan Skorupan
    </a>
    <menu-button>
      <template>
        <button class="menu-button" aria-expanded="false">
          <span class="sr-only">Menu</span>
          <span class="icon-menu"><Icon icon="list" /></span>
          <span class="icon-close"><Icon icon="x" /></span>
        </button>
      </template>
    </menu-button>
  </div>
  
  <noscript>
    <ul class="nav-items">
      {textLinks.map(({ label, href }) => (
        <li>
          <a aria-current={isCurrentPage(href) ? 'page' : undefined} class="link" href={href}>
            {label}
          </a>
        </li>
      ))}
    </ul>
  </noscript>

  <div id="menu-content" hidden>
    <ul class="nav-items">
      {textLinks.map(({ label, href }) => (
        <li>
          <a aria-current={isCurrentPage(href) ? 'page' : undefined} class="link" href={href}>
            {label}
          </a>
        </li>
      ))}
    </ul>
    <div class="menu-footer">
      <div class="socials">
        {iconLinks.map(({ href, icon, label }) => (
          <a target="_blank" href={href} class="social" rel="noopener noreferrer">
            <span class="sr-only">{label}</span>
            <Icon icon={icon} size='2em' />
          </a>
        ))}
      </div>
      <div class="theme-toggle">
        <ThemeToggle />
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();
      this.appendChild(this.querySelector('template')!.content.cloneNode(true));
      const btn = this.querySelector('button');
      const menu = document.getElementById('menu-content');

      if (!btn || !menu) return;
      
      // Initially hide menu & add class for JS-only styles
      menu.hidden = true;
      menu.classList.add('menu-content');

      // This is the simplified, reliable function to open/close the menu
      const setExpanded = (isExpanded: boolean) => {
        btn.setAttribute('aria-expanded', String(isExpanded));
        menu.hidden = !isExpanded;
      };

      // When the button is clicked, toggle the state
      btn.addEventListener('click', () => {
        const isExpanded = btn.getAttribute('aria-expanded') === 'true';
        setExpanded(!isExpanded);
      });

      // Handle window resizing
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        const isMobile = e.matches;
        btn.hidden = !isMobile;
        // On desktop, the menu is not handled by this script
        // On mobile, ensure it's closed on load
        if (isMobile) {
          setExpanded(false);
        } else {
          setExpanded(true); // Effectively hides the dropdown on desktop
        }
      };
      
      const mediaQueries = window.matchMedia('(max-width: 49.99em)');
      handleViewports(mediaQueries);
      mediaQueries.addEventListener('change', handleViewports);
    }
  }
  customElements.define('menu-button', MenuButton);
</script>

<style>
  /* --- Base Mobile Styles --- */
  nav {
    font-family: var(--font-brand);
    font-weight: 500;
    margin-bottom: 3.5rem;
    position: relative;
    z-index: 9990;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 0.5rem;
    padding: 1.5rem;
    background-color: var(--gray-999);
    border-bottom: 1px solid var(--gray-800);
    position: relative;
    z-index: 20;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    line-height: 1.1;
    color: var(--gray-0);
    text-decoration: none;
    font-size: var(--text-lg);
  }

  .menu-button {
    position: relative;
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem;
    width: 2.5rem;
    height: 2.5rem;
    font-size: 1.5rem;
    color: var(--gray-300);
    background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
    box-shadow: var(--shadow-md);
    outline: none;
    cursor: pointer;
  }
  
  .menu-button[aria-expanded='true'] {
    color: var(--gray-0);
  }

  .menu-button[hidden] {
    display: none;
  }

  /* Animated Hamburger Icon */
  .menu-button .icon-menu,
  .menu-button .icon-close {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  .menu-button .icon-close {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(-90deg);
  }
  .menu-button[aria-expanded='true'] .icon-menu {
    opacity: 0;
    transform: translate(-50%, -50%) rotate(90deg);
  }
  .menu-button[aria-expanded='true'] .icon-close {
    opacity: 1;
    transform: translate(-50%, -50%) rotate(0deg);
  }

  /* This is the dropdown panel */
  .menu-content {
    position: absolute;
    left: 0;
    right: 0;
    z-index: 10;
    background-color: var(--gray-999);
    border-bottom: 1px solid var(--gray-800);
    border-radius: 0 0 0.75rem 0.75rem;
    box-shadow: var(--shadow-lg);
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    font-size: var(--text-md);
    list-style: none;
    padding: 2rem;
  }
  .link {
    display: inline-block;
    color: var(--gray-300);
    text-decoration: none;
  }
  .link[aria-current='page'] {
    color: var(--gray-0);
  }
  .menu-footer {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    padding: 1.5rem 2rem;
    border-top: 1px solid var(--gray-800);
  }
  .socials {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }
  .social {
    display: flex;
    color: var(--accent-dark);
  }

  /* --- Desktop Styles (Sticky Glass Header) --- */
  @media (min-width: 50em) {
    nav {
      position: sticky;
      top: 0;
      z-index: 9999;
      width: 100%;
      background-color: hsla(var(--gray-999-basis), 0.5);
      backdrop-filter: blur(16px);
      border-bottom: 1px solid var(--gray-800);
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      padding: 1rem 5rem;
      gap: 1rem;
    }

    .menu-header {
      padding: 0;
      border: 0;
      background-color: transparent;
    }

    .menu-content {
      display: contents; /* Allows menu items to become direct grid children */
    }

    .nav-items {
      position: relative;
      flex-direction: row;
      justify-content: center;
      font-size: var(--text-sm);
      border-radius: 999rem;
      border: 0;
      padding: 0.5rem 0.5625rem;
      background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
      box-shadow: var(--shadow-md);
    }

    .nav-items::before {
      position: absolute;
      inset: -1px;
      content: '';
      background: var(--gradient-stroke);
      border-radius: 999rem;
      z-index: -1;
    }

    .link {
      padding: 0.5rem 1rem;
      border-radius: 999rem;
      transition: color var(--theme-transition), background-color var(--theme-transition);
    }

    .link:hover, .link:focus {
      color: var(--gray-100);
      background-color: var(--accent-subtle-overlay);
    }

    .link[aria-current='page'] {
      color: var(--accent-text-over);
      background-color: var(--accent-regular);
    }

    .menu-footer {
      grid-column: 3 / 4;
      justify-self: flex-end;
      padding: 0;
      background-color: transparent;
      box-shadow: none;
      border: 0;
    }
  }
</style>
