---
import { type CollectionEntry, getCollection } from 'astro:content';
import { render } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import Button from '../../components/Button.astro';
import CallToAction from '../../components/CallToAction.astro';

export async function getStaticPaths() {
  const work = await getCollection('work');
  return work.map((entry) => ({
    params: { slug: entry.id },
    props: { entry },
  }));
}

interface Props {
  entry: CollectionEntry<'work'>;
}
const { entry } = Astro.props;
const { Content } = await render(entry);
---

<BaseLayout title={entry.data.title} description={entry.data.description}>
  <div class="stack gap-20">
    <header class="project-header">
      <div class="wrapper stack gap-4">
        <a class="back-link" href="/work/"><Icon icon="arrow-left" /> Back to Work</a>
        <Hero title={entry.data.title} align="start">
          <p class="description">{entry.data.description}</p>
        </Hero>
      </div>
    </header>

    <main class="wrapper">
      <div class="project-layout">
        <div class="prose">
          {entry.data.img && <img src={entry.data.img} alt={entry.data.img_alt || ''} />}
          <Content />
        </div>

        <aside class="meta-sidebar">
          <div class="sticky-content">
            <div class="meta-group">
              <h3 class="meta-title">Role</h3>
              <p>{entry.data.role}</p>
            </div>
            <div class="meta-group">
              <h3 class="meta-title">Client</h3>
              <p>{entry.data.client}</p>
            </div>
            <div class="meta-group">
              <h3 class="meta-title">Year</h3>
              <p>{entry.data.year}</p>
            </div>
            <div class="meta-group">
              <h3 class="meta-title">Technologies</h3>
              <div class="tags">
                {entry.data.tags.map((t) => <Pill>{t}</Pill>)}
              </div>
            </div>
            
            <div class="meta-group links">
              {entry.data.liveUrl && (
                <Button href={entry.data.liveUrl} target="_blank">
                  Demo <Icon icon="arrow-right" size="1.2em" />
                </Button>
              )}
              {entry.data.repoUrl && (
                <Button href={entry.data.repoUrl} target="_blank">
                  View Code <Icon icon="github-logo" size="1.2em" />
                </Button>
              )}
            </div>
          </div>
        </aside>
      </div>
    </main>

    <ContactCTA />
  </div>
</BaseLayout>

<style>
  .project-header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .back-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--gray-300);
    text-decoration: none;
    font-size: var(--text-sm);
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  .prose {
    max-width: 65ch;
  }
  .prose > :global(* + *) { margin-top: 1.5rem; }
  .prose :global(h1), .prose :global(h2), .prose :global(h3) { margin: 2rem 0 1rem; }
  .prose :global(img) {
    border-radius: 1.5rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--gray-800);
  }
  .prose :global(blockquote) {
    font-size: var(--text-lg);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .meta-sidebar {
    border-top: 1px solid var(--gray-800);
    padding-top: 2rem;
    margin-top: 3rem;
  }

  .meta-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  .meta-group + .meta-group {
    margin-top: 1.5rem;
  }

  .meta-title {
    font-size: var(--text-sm);
    font-family: var(--font-body);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--gray-400);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .links {
    gap: 1rem;
  }

  @media (min-width: 62em) {
    .project-layout {
      display: grid;
      grid-template-columns: 1fr 280px;
      gap: 5rem;
    }

    .meta-sidebar {
      border-top: none;
      padding-top: 0;
      margin-top: 0;
    }

    .sticky-content {
      position: sticky;
      top: 8rem;
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
  }
</style>
